name: 'Reusable Terraform CD'

on:
  workflow_call:
    inputs:
      working_directory:
        description: 'Directory containing the Terraform root module'
        required: true
        type: string
        default: '.'
      tf_version:
        description: 'Terraform CLI version'
        required: false
        type: string
        default: 'latest'
      tfvars_paths:
        description: 'JSON array of paths to .tfvars files (relative to working_directory)'
        required: false
        type: string
        default: '[]'
      tfbackend_path:
        description: 'Path to the .tfbackend file (relative to working_directory)'
        required: true
        type: string
      backend_config_overrides:
        description: 'Optional backend config key=value pairs (JSON object string)'
        required: false
        type: string
        default: '{}'
      tf_action:
        description: "Terraform action ('apply' or 'destroy')"
        required: false
        type: string
        default: 'apply'
      job_prefix:
        description: 'Prefix for job display names (e.g., dev, prod)'
        required: true
        type: string
      plan_environment_name:
        description: 'Name of the pre-configured GitHub Environment for the Plan job'
        required: true
        type: string
      apply_environment_name:
        description: 'Name of the pre-configured GitHub Environment for the Apply job'
        required: true
        type: string

    secrets:
      AZURE_CLIENT_ID:
        description: 'Azure Client ID for OIDC'
        required: true
      AZURE_TENANT_ID:
        description: 'Azure Tenant ID for OIDC'
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: 'Azure Subscription ID for OIDC'
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  plan:
    name: '${{ inputs.job_prefix }}_plan (${{ inputs.plan_environment_name }})'
    runs-on: ubuntu-latest
    environment: ${{ inputs.plan_environment_name }}
    env:
      ARM_USE_OIDC: true
      ARM_USE_AZUREAD: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    outputs:
      tfplanExitCode: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Azure Login using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Terraform Init
        id: init
        run: |
          backend_args=""
          if [[ -n "${{ inputs.tfbackend_path }}" ]]; then
            backend_args="-backend-config=${{ inputs.tfbackend_path }}"
          fi
          backend_overrides='${{ inputs.backend_config_overrides }}'
          # Corrected: Use process substitution to avoid subshell for the loop
          if [[ "$backend_overrides" != "{}" ]]; then
            while IFS= read -r line; do
              backend_args="$backend_args $line"
            done < <(echo "$backend_overrides" | jq -r 'to_entries[] | "-backend-config=\(.key)=\(.value)"')
          fi
          echo "Running: terraform init -input=false $backend_args"
          terraform init -input=false $backend_args

      - name: Terraform Plan
        id: plan
        run: |
          plan_args="-input=false -out=tfplan -detailed-exitcode"
          if [[ "${{ inputs.tf_action }}" == "destroy" ]]; then
            plan_args="$plan_args -destroy"
          fi
          tfvars_paths_json='${{ inputs.tfvars_paths }}'
          if [[ -n "$tfvars_paths_json" && "$tfvars_paths_json" != "[]" ]]; then
            while IFS= read -r tfvar_path; do
              if [[ -n "$tfvar_path" ]]; then
                plan_args="$plan_args -var-file=\"$tfvar_path\""
              fi
            # Corrected: Use process substitution here too for consistency
            done < <(echo "$tfvars_paths_json" | jq -r '.[]')
          fi
          set +e
          echo "Running: terraform plan $plan_args"
          terraform plan $plan_args
          exitcode=$?
          set -e
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          if [ $exitcode -eq 1 ]; then
            echo "::error::Terraform Plan Failed!"
            exit 1
          fi

      - name: Create Plan Output for Summary
        id: plan-output
        if: steps.plan.outputs.exitcode == '0' || steps.plan.outputs.exitcode == '2'
        run: |
          PLAN_OUTPUT=$(terraform show -no-color tfplan)
          PLAN_OUTPUT="${PLAN_OUTPUT//'%'/'%25'}"
          PLAN_OUTPUT="${PLAN_OUTPUT//$'\n'/'%0A'}"
          PLAN_OUTPUT="${PLAN_OUTPUT//$'\r'/'%0D'}"
          echo "plan_text<<EOF" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          terraform show -no-color tfplan >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        if: steps.plan.outputs.exitcode == '0' || steps.plan.outputs.exitcode == '2'
        env:
          PLAN_SUMMARY: ${{ steps.plan-output.outputs.plan_text }}
        run: |
          echo "## Terraform Plan Summary (${{ inputs.plan_environment_name }})" >> $GITHUB_STEP_SUMMARY
          echo "**Working Directory:** \`${{ inputs.working_directory }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** \`${{ inputs.tf_action }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Plan Result:** $(if [ ${{ steps.plan.outputs.exitcode }} -eq 0 ]; then echo 'No Changes'; else echo 'Changes Detected'; fi)" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Click to expand Plan Output</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${PLAN_SUMMARY}" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      - name: Upload Terraform Plan Artifact
        if: steps.plan.outputs.exitcode == '2'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ inputs.plan_environment_name }}
          path: ${{ inputs.working_directory }}/tfplan
          retention-days: 1

  apply:
    name: '${{ inputs.job_prefix }}_apply (${{ inputs.apply_environment_name }})'
    runs-on: ubuntu-latest
    environment: ${{ inputs.apply_environment_name }}
    env:
      ARM_USE_OIDC: true
      ARM_USE_AZUREAD: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    needs: plan
    if: needs.plan.outputs.tfplanExitCode == '2'
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Azure Login using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ inputs.plan_environment_name }}
          path: ${{ inputs.working_directory }}

      - name: Terraform Init
        id: init
        run: |
          backend_args=""
          if [[ -n "${{ inputs.tfbackend_path }}" ]]; then
            backend_args="-backend-config=${{ inputs.tfbackend_path }}"
          fi
          backend_overrides='${{ inputs.backend_config_overrides }}'
           # Corrected: Use process substitution to avoid subshell for the loop
          if [[ "$backend_overrides" != "{}" ]]; then
            while IFS= read -r line; do
              backend_args="$backend_args $line"
            done < <(echo "$backend_overrides" | jq -r 'to_entries[] | "-backend-config=\(.key)=\(.value)"')
          fi
          echo "Running: terraform init -input=false $backend_args"
          terraform init -input=false $backend_args
        env:
          ARM_USE_OIDC: true
          ARM_USE_AZUREAD: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Apply / Destroy
        run: |
          apply_args="-auto-approve tfplan"
          if [[ "${{ inputs.tf_action }}" == "destroy" ]]; then
             echo "Applying Terraform Destroy Plan"
          else
             echo "Applying Terraform Apply Plan"
          fi
          terraform apply $apply_args