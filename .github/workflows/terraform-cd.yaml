name: 'Reusable Terraform CD'

on:
  workflow_call:
    inputs:
      working_directory:
        description: 'Directory containing the Terraform root module'
        required: true
        type: string
        default: '.'
      tf_version:
        description: 'Terraform CLI version'
        required: false
        type: string
        default: 'latest'
      tfvars_file:
        description: 'Path to the .tfvars file (relative to working_directory)'
        required: false
        type: string
        default: ''
      tfbackend_file:
        description: 'Path to the .tfbackend file (relative to working_directory)'
        required: true # Make backend explicit
        type: string
      backend_config_overrides:
        description: 'Optional backend config key=value pairs (JSON object string)'
        required: false
        type: string
        default: '{}' # e.g., '{ "resource_group_name": "override-rg", "key": "override.tfstate" }'
      environment:
        description: 'Name of the GitHub Environment to target (for secrets and protection rules)'
        required: true
        type: string # e.g., 'dev', 'uat', 'production'
      tf_action:
        description: "Terraform action ('apply' or 'destroy')"
        required: false
        type: string
        default: 'apply'

    secrets:
      AZURE_CREDENTIALS: # Define this secret in the target GitHub Environment
        description: 'JSON object with { client-id, tenant-id, subscription-id } for the target environment'
        required: true

# Permissions required for OIDC
permissions:
  id-token: write
  contents: read
  # actions: read # May be needed for accessing reusable workflows from other private repos

jobs:
  plan:
    name: 'Terraform Plan (${{ inputs.environment }})'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }} # Associate job with GitHub Environment
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    outputs:
      tfplanExitCode: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Azure Login using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).client-id }}
          tenant-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenant-id }}
          subscription-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscription-id }}
          enable-AzPSSession: false

      - name: Terraform Init
        id: init
        run: |
          backend_args=""
          if [[ -n "${{ inputs.tfbackend_file }}" ]]; then
            backend_args="-backend-config=\"${{ inputs.tfbackend_file }}\""
          else
            echo "::warning::tfbackend_file input not provided. Relying on backend block in code or overrides."
          fi

          # Process JSON overrides object
          backend_overrides='${{ inputs.backend_config_overrides }}'
          if [[ "$backend_overrides" != "{}" ]]; then
            echo "Applying backend overrides..."
            echo "$backend_overrides" | jq -r 'to_entries[] | "-backend-config=\(.key)=\(.value)"' | while IFS= read -r line; do
              backend_args="$backend_args $line"
            done
          fi

          echo "Running: terraform init -input=false $backend_args"
          terraform init -input=false $backend_args
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).client-id }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscription-id }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenant-id }}
          ARM_USE_OIDC: true

      - name: Terraform Plan
        id: plan
        run: |
          plan_args="-input=false -out=tfplan -detailed-exitcode"
          if [[ "${{ inputs.tf_action }}" == "destroy" ]]; then
            plan_args="$plan_args -destroy"
            echo "Planning a destroy operation."
          fi
          if [[ -n "${{ inputs.tfvars_file }}" ]]; then
            plan_args="$plan_args -var-file=${{ inputs.tfvars_file }}"
          fi

          set +e
          terraform plan $plan_args
          exitcode=$?
          set -e

          echo "Terraform Plan Exit Code: $exitcode"
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo "::error::Terraform Plan Failed!"
            exit 1
          elif [ $exitcode -eq 0 ]; then
             echo "Terraform Plan shows no changes."
          elif [ $exitcode -eq 2 ]; then
             echo "Terraform Plan shows changes."
          else
             echo "::error::Terraform Plan returned unexpected exit code $exitcode"
             exit 1
          fi
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).client-id }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscription-id }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenant-id }}
          ARM_USE_OIDC: true

      - name: Create Plan Output for Summary
        id: plan-output
        if: steps.plan.outputs.exitcode == '0' || steps.plan.outputs.exitcode == '2'
        run: |
          PLAN_OUTPUT=$(terraform show -no-color tfplan)
          # Escape special characters for markdown and multiline output
          PLAN_OUTPUT="${PLAN_OUTPUT//'%'/'%25'}"
          PLAN_OUTPUT="${PLAN_OUTPUT//$'\n'/'%0A'}"
          PLAN_OUTPUT="${PLAN_OUTPUT//$'\r'/'%0D'}"
          echo "plan_text<<EOF" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          terraform show -no-color tfplan >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        if: steps.plan.outputs.exitcode == '0' || steps.plan.outputs.exitcode == '2'
        env:
          PLAN_SUMMARY: ${{ steps.plan-output.outputs.plan_text }}
        run: |
          echo "## Terraform Plan Summary (${{ inputs.environment }})" >> $GITHUB_STEP_SUMMARY
          echo "**Working Directory:** \`${{ inputs.working_directory }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** \`${{ inputs.tf_action }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Plan Result:** $(if [ ${{ steps.plan.outputs.exitcode }} -eq 0 ]; then echo 'No Changes'; else echo 'Changes Detected'; fi)" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Click to expand Plan Output</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${PLAN_SUMMARY}" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      - name: Upload Terraform Plan Artifact
        if: steps.plan.outputs.exitcode == '2' # Only upload if there are changes to apply/destroy
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ inputs.environment }}
          path: ${{ inputs.working_directory }}/tfplan
          retention-days: 1 # Keep plan only as long as needed

  apply:
    name: 'Terraform Apply (${{ inputs.environment }})'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }} # Associate job with GitHub Environment (for approvals etc)
    needs: plan
    # Only run apply if plan had changes (exit code 2)
    if: needs.plan.outputs.tfplanExitCode == '2'
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Checkout fresh copy or rely solely on downloaded plan? Checkout is safer.

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Azure Login using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).client-id }}
          tenant-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenant-id }}
          subscription-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscription-id }}
          enable-AzPSSession: false

      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ inputs.environment }}
          path: ${{ inputs.working_directory }} # Download plan into the working directory

      - name: Terraform Init # Required before apply, even with plan file
        id: init
        run: |
          backend_args=""
          if [[ -n "${{ inputs.tfbackend_file }}" ]]; then
            backend_args="-backend-config=\"${{ inputs.tfbackend_file }}\""
          else
            echo "::warning::tfbackend_file input not provided. Relying on backend block in code or overrides."
          fi

          # Process JSON overrides object
          backend_overrides='${{ inputs.backend_config_overrides }}'
          if [[ "$backend_overrides" != "{}" ]]; then
            echo "Applying backend overrides..."
            echo "$backend_overrides" | jq -r 'to_entries[] | "-backend-config=\(.key)=\(.value)"' | while IFS= read -r line; do
              backend_args="$backend_args $line"
            done
          fi

          echo "Running: terraform init -input=false $backend_args"
          terraform init -input=false $backend_args
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).client-id }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscription-id }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenant-id }}
          ARM_USE_OIDC: true

      - name: Terraform Apply / Destroy
        run: |
          apply_args="-auto-approve tfplan"
          if [[ "${{ inputs.tf_action }}" == "destroy" ]]; then
            # Destroy flag is part of the plan file, no extra flag needed for apply
             echo "Applying Terraform Destroy Plan"
          else
             echo "Applying Terraform Apply Plan"
          fi
          terraform apply $apply_args
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).client-id }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscription-id }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenant-id }}
          ARM_USE_OIDC: true